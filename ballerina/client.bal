// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# API for interacting with Ollama, an AI model management and inference system
public isolated client class OllamaClient {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #   
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config =  {}, string serviceUrl = "http://localhost:11434/api") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Delete a model
    #
    # + headers - Headers to be sent with the request 
    # + return - Model deleted successfully 
    resource isolated function delete delete(DeleteRequest payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/delete`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->delete(resourcePath, request, headers);
    }

    # List available models
    #
    # + headers - Headers to be sent with the request 
    # + return - List of available models 
    resource isolated function get tags(map<string|string[]> headers = {}) returns TagsResponse|error {
        string resourcePath = string `/tags`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Register model file blob
    #
    # + headers - Headers to be sent with the request 
    # + return - Blob registered successfully 
    resource isolated function post blobs/[string digest](byte[] payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/blobs/${getEncodedUri(digest)}`;
        http:Request request = new;
        request.setPayload(payload, "application/octet-stream");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Chat with a model
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful chat response 
    resource isolated function post chat(ChatRequest payload, map<string|string[]> headers = {}) returns ChatResponse|error {
        string resourcePath = string `/chat`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Copy a model
    #
    # + headers - Headers to be sent with the request 
    # + return - Model copied successfully 
    resource isolated function post copy(CopyRequest payload, map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/copy`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Create a new model
    #
    # + headers - Headers to be sent with the request 
    # + return - Model created successfully 
    resource isolated function post create(CreateRequest payload, map<string|string[]> headers = {}) returns CreateResponse|error {
        string resourcePath = string `/create`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Generate embeddings
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful embeddings generation 
    resource isolated function post embeddings(EmbeddingsRequest payload, map<string|string[]> headers = {}) returns EmbeddingsResponse|error {
        string resourcePath = string `/embeddings`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Generate text completion
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful generation 
    resource isolated function post generate(GenerateRequest payload, map<string|string[]> headers = {}) returns GenerateResponse|error {
        string resourcePath = string `/generate`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Pull a model
    #
    # + headers - Headers to be sent with the request 
    # + return - Model pulled successfully 
    resource isolated function post pull(PullRequest payload, map<string|string[]> headers = {}) returns PullResponse|error {
        string resourcePath = string `/pull`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Push a model
    #
    # + headers - Headers to be sent with the request 
    # + return - Model pushed successfully 
    resource isolated function post push(PushRequest payload, map<string|string[]> headers = {}) returns PushResponse|error {
        string resourcePath = string `/push`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Show model information
    #
    # + headers - Headers to be sent with the request 
    # + return - Model information 
    resource isolated function post show(ShowRequest payload, map<string|string[]> headers = {}) returns ShowResponse|error {
        string resourcePath = string `/show`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }
}
